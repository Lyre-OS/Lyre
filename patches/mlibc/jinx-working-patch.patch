diff --git mlibc-clean/abis/linux/in.h mlibc-workdir/abis/linux/in.h
index bb5b6ef..8d66fe8 100644
--- mlibc-clean/abis/linux/in.h
+++ mlibc-workdir/abis/linux/in.h
@@ -86,6 +86,10 @@ struct group_req {
 #define INET_ADDRSTRLEN  16
 #define INET6_ADDRSTRLEN 46
 
+#define IPV6_MULTICAST_HOPS 18
+
+#define IP_MULTICAST_TTL 33
+
 #define IPPORT_RESERVED 1024
 
 #define IPPROTO_IP       0
diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index 2261926..bee1bf8 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -315,19 +315,6 @@ subdir('options/bsd')
 rtlib_deps = []
 
 if not headers_only
-	libgcc = meson.get_compiler('c').find_library('gcc', required: false)
-
-	compiler_rt_name = 'libclang_rt.builtins-' + host_machine.cpu_family()
-	compiler_rt = meson.get_compiler('c').find_library(compiler_rt_name, required: false)
-
-	if libgcc.found()
-		rtlib_deps += libgcc
-	elif compiler_rt.found()
-		rtlib_deps += compiler_rt
-	else
-		error('neither libgcc nor ' + compiler_rt_name + ' was found')
-	endif
-
 	ld_cpp_args = [
 		'-fvisibility=hidden',
 		'-fno-stack-protector',
diff --git mlibc-clean/options/glibc/generic/execinfo.cpp mlibc-workdir/options/glibc/generic/execinfo.cpp
index 3474615..e034881 100644
--- mlibc-clean/options/glibc/generic/execinfo.cpp
+++ mlibc-workdir/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/debug.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "libc: backtrace() is not implemented!\n" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git mlibc-clean/sysdeps/lyre/generic/generic.cpp mlibc-workdir/sysdeps/lyre/generic/generic.cpp
index fced008..7ba9337 100644
--- mlibc-clean/sysdeps/lyre/generic/generic.cpp
+++ mlibc-workdir/sysdeps/lyre/generic/generic.cpp
@@ -684,7 +684,10 @@ int sys_listen(int fd, int backlog) {
 	return 0;
 }
 
-int sys_inotify_create(int, int *) STUB_ONLY
+int sys_inotify_create(int, int *) {
+	mlibc::infoLogger() << "mlibc: sys_inotify_create() is unimplemented" << frg::endlog;
+	return ENOSYS;
+}
 
 int sys_fork(pid_t *child) {
 	__syscall_ret ret = __syscall(SYS_fork);
