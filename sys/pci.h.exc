#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

struct PCIDeviceBar {
    size_t base;
    size_t size;
    bool   is_mmio;
    bool   is_prefetchable;
};

class PCIDevice {
    uint8_t bus;
    uint8_t device;
    uint8_t function;
    uint8_t _class;
    uint8_t subclass;
    uint8_t prog_if;

    void prepare_config(uint32_t offset);

public:
    PCIDevice(uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t);

    uint8_t get_bus()      const;
    uint8_t get_device()   const;
    uint8_t get_function() const;
    uint8_t get_class()    const;
    uint8_t get_subclass() const;
    uint8_t get_prog_if()  const;

    uint8_t  readb(uint32_t offset);
    void     writeb(uint32_t offset, uint8_t value);
    uint16_t readw(uint32_t offset);
    void     writew(uint32_t offset, uint16_t value);
    uint32_t readd(uint32_t offset);
    void     writed(uint32_t offset, uint32_t value);
    int      read_bar(size_t index, PCIDeviceBar &bar);
    int      register_msi(uint8_t vector, uint8_t lapic_id);
};

#define PCI_HAS_CAPS 0x4
#define PCI_CAPS     0x34
#define MSI_OPT      0x2
#define MSI_ADDR_LOW 0x4
#define MSI_DATA_32  0x8
#define MSI_DATA_64  0xC
#define MSI_64BIT_SUPPORTED (1 << 7)

union msi_address_t {
    struct {
        uint32_t _reserved0 : 2;
        uint32_t destination_mode : 1;
        uint32_t redirection_hint : 1;
        uint32_t _reserved1 : 8;
        uint32_t destination_id : 8;
        // must be 0xFEE
        uint32_t base_address : 12;
    };
    uint32_t raw;
} __attribute__((packed));

union msi_data_t {
    struct {
        uint32_t vector : 8;
        uint32_t delivery_mode : 3;
        uint32_t _reserved0 : 3;
        uint32_t level : 1;
        uint32_t trigger_mode : 1;
        uint32_t _reserved1 : 16;
    };
    uint32_t raw;
} __attribute__((packed));

void pci_init();
PCIDevice *pci_get_device(uint8_t cl, uint8_t subcl, uint8_t prog_if);
